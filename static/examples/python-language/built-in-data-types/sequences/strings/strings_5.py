#!/usr/bin/env python3

# Словарь для подстановки значений в строки
v = {'num': 444, 'dec': 'десятичное', 'oct': 'восьмеричному', 'hex': 'шестнадцатеричному'}

# Разные способы представления одного и того же десятичного числа с помощью спецификаторов %d, %e, %f
s = '%(dec)s число %(num)d равно числам %(num)e и %(num)f'
print(s % v)
# Выведет:
# десятичное число 444 равно числам 4.440000e+02 и 444.000000

# Представление целого числа в виде восьмеричного и шестнадцатеричного чисел с помощью спецификаторов %o, %x
s = '%(dec)s число %(num)d равно %(oct)s числу %(num)o и %(hex)s числу %(num)x'
print(s % v)
# Выведет:
# десятичное число 444 равно восьмеричному числу 674 и шестнадцатеричному числу 1bc

# Представление строки с помощью спецификатора %r и шестнадцатеричного числа в верхнем регистре с помощью спецификатора %X
s = '%(dec)r число %(num)e равно %(oct)r числу %(num)o и %(hex)r числу %(num)X'
print(s % v)
# Выведет:
# 'десятичное' число 4.440000e+02 равно 'восьмеричному' числу 674 и 'шестнадцатеричному' числу 1BC

# Альтернативная форма восьмеричного и шестнадцатеричного чисел с помощью спецификаторов %#o, %#x
s = '%(dec)s число %(num)d равно %(oct)s числу %(num)#o и %(hex)s числу %(num)#x'
print(s % v)
# Выведет:
# десятичное число 444 равно восьмеричному числу 0o674 и шестнадцатеричному числу 0x1bc

# Заполнение ведущими пробелами (выравнивание подстрок по правому краю) с помощью спецификаторов %10d, %10o, %10x,
# чтобы получились подстроки каждая длиной 10 символов с учётом количества символов, нужных для вывода чисел
s = '%(dec)s число %(num)10d равно %(oct)s числу %(num)10o и %(hex)s числу %(num)10x'
print(s % v)
# Выведет:
# десятичное число        444 равно восьмеричному числу        674 и шестнадцатеричному числу        1bc

# Альтернативная форма восьмеричного и шестнадцатеричного чисел в сочетании с заполнением ведущими пробелами
# с помощью спецификаторов %#10o, %#10x, чтобы получились подстроки каждая длиной 10 символов
s = '%(dec)s число %(num)10d равно %(oct)s числу %(num)#10o и %(hex)s числу %(num)#10x'
print(s % v)
# Выведет:
# десятичное число        444 равно восьмеричному числу      0o674 и шестнадцатеричному числу      0x1bc

# Заполнение завершающими пробелами (выравнивание подстрок по левому краю) с помощью спецификаторов %-10d, %-10o, %-10x,
# чтобы получились подстроки каждая длиной 10 символов с учётом количества символов, нужных для вывода чисел
s = '%(dec)s число %(num)-10d равно %(oct)s числу %(num)-10o и %(hex)s числу %(num)-10x'
print(s % v)
# Выведет:
# десятичное число 444        равно восьмеричному числу 674        и шестнадцатеричному числу 1bc

# Альтернативная форма восьмеричного и шестнадцатеричного чисел в сочетании с заполнением завершающими пробелами
# с помощью спецификаторов %#-10o, %#-10x, чтобы получились подстроки каждая длиной 10 символов
s = '%(dec)s число %(num)-10d равно %(oct)s числу %(num)#-10o и %(hex)s числу %(num)#-10x'
print(s % v)
# Выведет:
# десятичное число 444        равно восьмеричному числу 0o674      и шестнадцатеричному числу 0x1bc

# Добавление дополнительного одиночного ведущего пробела в представлениях чисел с помощью спецификаторов % d, % o, % x
s = '%(dec)s число %(num) d равно %(oct)s числу %(num) o и %(hex)s числу %(num) x'
print(s % v)
# Выведет:
# десятичное число  444 равно восьмеричному числу  674 и шестнадцатеричному числу  1bc

# Принудительный вывод знаков чисел с помощью спецификаторов %+d, %+o, %+x
s = '%(dec)s число %(num)+d равно %(oct)s числу %(num)+o и %(hex)s числу %(num)+x'
print(s % v)
# Выведет:
# десятичное число +444 равно восьмеричному числу +674 и шестнадцатеричному числу +1bc

# Альтернативная форма восьмеричного и шестнадцатеричного чисел в сочетании с
# принудительным выводом знаков чисел с помощью спецификаторов %#+o, %#+x
s = '%(dec)s число %(num)+d равно %(oct)s числу %(num)#+o и %(hex)s числу %(num)#+x'
print(s % v)
# Выведет:
# десятичное число +444 равно восьмеричному числу +0o674 и шестнадцатеричному числу +0x1bc

# Заполнение ведущими нулями с помощью спецификаторов %010d, %010o, %010x,
# чтобы получились подстроки каждая длиной 10 символов с учётом количества символов, нужных для вывода чисел
s = '%(dec)s число %(num)010d равно %(oct)s числу %(num)010o и %(hex)s числу %(num)010x'
print(s % v)
# Выведет:
# десятичное число 0000000444 равно восьмеричному числу 0000000674 и шестнадцатеричному числу 00000001bc

# Альтернативная форма восьмеричного и шестнадцатеричного чисел в сочетании с заполнением ведущими нулями
# с помощью спецификаторов %#010o, %#010x, чтобы получились подстроки каждая длиной 10 символов
s = '%(dec)s число %(num)010d равно %(oct)s числу %(num)#010o и %(hex)s числу %(num)#010x'
print(s % v)
# Выведет:
# десятичное число 0000000444 равно восьмеричному числу 0o00000674 и шестнадцатеричному числу 0x000001bc

# Альтернативная форма восьмеричного и шестнадцатеричного чисел в сочетании с заполнением ведущими нулями и принудительным
# выводом знаков чисел с помощью спецификаторов %#+010o, %#+010x, чтобы получились подстроки каждая длиной 10 символов
s = '%(dec)s число %(num)+010d равно %(oct)s числу %(num)#+010o и %(hex)s числу %(num)#+010x'
print(s % v)
# Выведет:
# десятичное число +000000444 равно восьмеричному числу +0o0000674 и шестнадцатеричному числу +0x00001bc

# Альтернативная форма восьмеричного и шестнадцатеричного чисел в сочетании с заполнением завершающими пробелами и принудительным
# выводом знаков чисел с помощью спецификаторов %#+-10o, %#-+10x, чтобы получились подстроки каждая длиной 10 символов
s = '%(dec)s число %(num)+-10d равно %(oct)s числу %(num)#+-10o и %(hex)s числу %(num)#-+10x'
print(s % v)
# Выведет:
# десятичное число +444       равно восьмеричному числу +0o674     и шестнадцатеричному числу +0x1bc

# Вывод знака % при помощи экранирования
s = '10%% от числа %d равно %f' % (444, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно 44.400000

# Задание ширины подстроки (заполнение ведущими пробелами) с помощью спецификатора %10f,
# чтобы получилась подстрока длиной 10 символов
s = '10%% от числа %d равно %10f' % (444, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно  44.400000

# Задание ширины подстроки (заполнение ведущими пробелами) с помощью спецификатора %*f,
# чтобы ширина была взята из кортежа со значениями и получилась подстрока длиной 10 символов
s = '10%% от числа %d равно %*f' % (444, 10, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно  44.400000

# Задание точности округления десятичного числа с плавающей точкой с помощью спецификатора %.1f,
# чтобы после точки выводился один знак (производится округление до указанного количества знаков)
s = '10%% от числа %d равно %.1f' % (444, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно 44.4

# Задание точности округления десятичного числа с плавающей точкой с помощью спецификатора %.*f,
# чтобы после точки выводился один знак и точность округления была взята из кортежа со значениями
s = '10%% от числа %d равно %.*f' % (444, 1, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно 44.4

# Задание ширины подстроки (заполнение ведущими пробелами) в сочетании с точностью округления с помощью спецификатора %10.1f,
# чтобы получилась подстрока длиной 10 символов и после точки выводился один знак
s = '10%% от числа %d равно %10.1f' % (444, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно       44.4

# Задание ширины подстроки (заполнение ведущими пробелами) в сочетании с точностью округления с помощью спецификатора %*.*f,
# чтобы получилась подстрока длиной 10 символов и после точки выводился один знак,
# ширина подстроки и точность округления будут взяты из кортежа со значениями
s = '10%% от числа %d равно %*.*f' % (444, 10, 1, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно       44.4

# Принудительный вывод знака числа в сочетании с заданием ширины подстроки (заполнением ведущими пробелами)
# и точностью округления с помощью спецификатора %+10.1f
s = '10%% от числа %d равно %+10.1f' % (444, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно      +44.4

# Принудительный вывод знака числа в сочетании с заданием ширины подстроки (заполнением ведущими нулями)
# и точностью округления с помощью спецификатора %+010.1f
s = '10%% от числа %d равно %+010.1f' % (444, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно +0000044.4

# Принудительный вывод знака числа в сочетании с заданием ширины подстроки (заполнением ведущими нулями)
# и точностью округления с помощью спецификатора %+0*.*f,
# чтобы ширина подстроки и точность округления будут взяты из кортежа со значениями
s = '10%% от числа %d равно %+0*.*f' % (444, 10, 1, 444 * .1)
print(s)
# Выведет:
# 10% от числа 444 равно +0000044.4


# Принудительный вывод знака числа в сочетании с заданием ширины подстроки (заполнением ведущими нулями)
# и точностью округления с помощью спецификатора %(percent)+010.1f,
# чтобы обрабатываемое числа было взято из словаря со значениями
s = '10%% от числа %(num)d равно %(percent)+010.1f' % {'num': 444, 'percent': 444 * .1}
print(s)
# Выведет:
# 10% от числа 444 равно +0000044.4
